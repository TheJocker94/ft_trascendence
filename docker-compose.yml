version: '3'
services:
  # API
  api:
    env_file:
      - .env
    build:
      context: ./backend
      dockerfile: dockerfile
    volumes:
      - './backend/:/data'
    command: [ "/bin/sh", "-c", "npm install && npm run start:debug" ]

    ports:
      - 3000:3000
    restart: unless-stopped
    depends_on:
      - 'database'
    networks:
      - app

  # FRONTEND
  frontend:
    image: node:16-alpine
    build:
      context: ./frontend
      dockerfile: dockerfile
    # command:
    #   [
    #     "/bin/sh",
    #     "-c",
    #     "npm cache clean --force && npm install && npm run dev --prefix /data -- --host 0.0.0.0"
    #   ]
    ports:
      - 8080:8080
    restart: unless-stopped
    volumes:
      - './frontend/:/data'
    networks:
      - app
  # # DATABASE
  database:
    container_name: pg_container
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: '${DB_USERNAME}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
      POSTGRES_DB: '${DB_DATABASE}'
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '${DB_PORT}:5432'
    networks:
      - app
  # # Postgres admin
  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - '5050:80'
    networks:
      - app
  # NETWORKS
networks:
  app:
    driver: bridge

# VOLUMES
volumes:
  postgres-data:
    driver: local
