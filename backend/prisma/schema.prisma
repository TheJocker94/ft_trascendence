generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String  @id @default(uuid())
  username              String  @unique
  email                 String  @unique
  profilePicture        String? @default("/src/assets/morpheus.png")
  hash                  String
  hashedRt              String?
  isOnline              Boolean @default(false)
  winrate               Float?  @default(0)
  Wins                  Int     @default(0)
  Losses                Int     @default(0)
  Played                Int     @default(0)
  is2faEnabled          Boolean @default(false)
  emailVerificationCode String?

  sentFriendRequests     Friendship[] @relation("Friendship_Sender")
  receivedFriendRequests Friendship[] @relation("Friendship_Receiver")

  blockedUsers   BlockedUser[] @relation("Blocker_Relation")
  usersBlockedBy BlockedUser[] @relation("Blocked_Relation")

  @@map("users")
}

model Friendship {
  id         String           @id @default(uuid())
  senderId   String
  sender     User             @relation("Friendship_Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User             @relation("Friendship_Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  status     FriendshipStatus

  @@unique([senderId, receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model BlockedUser {
  blockerId String
  blocker   User   @relation("Blocker_Relation", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedId String
  blocked   User   @relation("Blocked_Relation", fields: [blockedId], references: [id], onDelete: Cascade)

  @@id([blockerId, blockedId])
}
